const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;
var new_window, lab_timer, attack_box_timer;
$(document).ready(function(){

    // Attacker Machine 
    // click on start instance
    $("#startInstanceBtn").click(start_machine);
    // click on the interact button :
    $("#fullScreenBtn").click(interract_machine);

    // click on terminate instance button
    $("#terminateInstanceBtn").click(terminate_machine);
    
    // Victime Machines

    //click on start button
    $("#btn-start").click(start_lab);
    //click on Quit button
    $("#btn-quit").click(end_lab);
    $("#completed").click(lab_done);
}
);


/////////////////////////////////////////////// Functions /////////////////////////////////////////


function start_machine(){
    const data = {
        action : 'startInstance',
        }
    var distance = -1 ;
    var btn = $(this)
    $(btn).prop('disabled',true)
    $("#terminateInstanceBtn").prop('disabled', false)
    document.getElementById("instanceOffline").style.display = "none";
    document.getElementById("startLoading").style.display = "block";

    axios.post('/attack-box/start/',data,{headers: {'X-CSRFToken': csrftoken}})
    .then(res => {
        console.log(res.data)
        var btn = $(this)
        setTimeout(function(){
            $(btn).hide();
            setTimeout(function(){
                document.getElementById("startLoading").style.display = "none";
                document.getElementById("instanceOnline").style.display = "block";
                document.getElementById("remainingTime").style.display = "inline";
                $("#fullScreenBtn").toggle(1000);
                $("#terminateInstanceBtn").toggle(1000);
                Swal.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: 'Attack Machine Powered-On Successfuly',
                    showConfirmButton: false,
                    timer: 2500
                  })
            },5000);
        }, 1000);
        // document.getElementById("fullScreenBtn").onclick = function(){
        //     window.open(res.data.link,"Attack Box","noopener,resizable,scrollbars")
        // }
        setTimeout(start_attack_box_timer, 1000);
    })
    .then(err => console.error(err));

}


function interract_machine(){
    const data = {
        action : 'interract',
        }

    axios.post('/attack-box/interract/',data,{headers: {'X-CSRFToken': csrftoken}})
    .then(res => {
        console.log(res.data)
        new_window = window.open(res.data.link,'Attack Box','resizable,scrollbars');
    })
    .then(err => console.error(err));
}

function terminate_machine(){
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, terminate it!'
      }).then((result) => {
        if (result.isConfirmed) {
            const data = {
                action : 'terminateInstance',
                }
            var btn = $(this)
            $(btn).prop('disabled',true)
            $("#startInstanceBtn").prop('disabled',false)
            document.getElementById("instanceOnline").style.display = "none";
            document.getElementById("remainingTime").style.display = "none";
            document.getElementById("terminateLoading").style.display = "block";
        
            axios.post('/attack-box/terminate/',data,{headers: {'X-CSRFToken': csrftoken}})
            .then(res => {
                // call another function that closes the app
                setTimeout(function(){
                    var btn = $(this)
        
                    setTimeout(function(){
                        $(btn).hide();
                        document.getElementById("terminateLoading").style.display = "none";
                        document.getElementById("instanceOffline").style.display = "block";
                        $("#startInstanceBtn").toggle(1000);
                        $("#terminateInstanceBtn").hide();
                        $("#fullScreenBtn").hide();
                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Attack Machine Powered-Off Successfuly',
                            showConfirmButton: false,
                            timer: 2500
                          })
                    }, 5000);
                },500);
                
                console.log(res.data)})
            .then(err => console.error(err));
            clearInterval(attack_box_timer);
        }
      })

}

////////// Victim Machines //////////////

function start_lab(){
    
    // My Code :   ************************************************************
    // Sending Start request to the backend
    const data = {
        action : 'start',
        }

    axios.post('start/',data,{headers: {'X-CSRFToken': csrftoken}})
    .then(res => {
        console.log(res)
        if (res.data.link) {
            var btn = $(this);
            $(btn).buttonLoader('start');
                setTimeout(function(){
                $("#btn-quit").toggle(1000);
                // $("#btn-stop").toggle(1000);
                $(btn).hide(1000);
                // $("#btn-lab-link").toggle(1000);
                $("#level-inProgress").toggle(1000);
                $("#level-stopped").hide();
                
                $(btn).buttonLoader('stop');
                document.getElementById("strong-ip").innerText = "Lab Link : " + res.data.link ;
                document.getElementById("ip").style.display = "block" ;
                document.getElementById("labRemainingTime").style.display = "inline";
                document.getElementById("completed").style.display = "inline";
                                 }, 3000);
            
            // The CountDown Functionality
            setTimeout(start_lab_timer(91),1000);
        }
        else {
            //document.getElementById("warning").style.display = "block" ;
            // alert("Please Power On the Attack Machine !");
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please Power On the Attack Machine !',
                confirmButtonColor : '#3085d6' 
              })
        }

    })
    .then(err => console.error(err));
    // End of the sending request
    // End of Code  *******************************************************
}

function end_lab(){

    // Sending a quit request to the Backend **************************************
    const data = {
        action :'quit'
    }
    axios.post('end/',data,{headers: {'X-CSRFToken': csrftoken}})
    .then(res => console.log(res.data))
    .then(err => console.error(err));
    // End of the sending request           ***************************************

    var btn = $("#btn-quit");
    $(btn).buttonLoader('start-q');
        setTimeout(function(){
        
        $("#btn-stop").fadeOut(1000);
        $(btn).hide(1000);
        $("#btn-start").show();
        // $("#btn-lab-link").fadeOut(1000);
        $("#level-inProgress").fadeOut(1000);
        $("#level-stopped").hide();
        $("#btn-continue").hide();
        $(btn).buttonLoader('stop-q');
        document.getElementById("ip").style.display = "none" ;
        document.getElementById("labRemainingTime").style.display = "none";
        document.getElementById("completed").style.display = "none";
                         }, 3000);
        clearInterval(lab_timer);
}

function lab_done(){
    // Sending a quit request to the Backend **************************************
       const data = {
        action :'done+quit'
    }
    axios.post('end/',data,{headers: {'X-CSRFToken': csrftoken}})
    .then(res => console.log(res.data))
    .then(err => console.error(err));
    // End of the sending request           ***************************************

    var btn = $(this);
    $(btn).buttonLoader('start-q');
        setTimeout(function(){
            $("#btn-quit").hide();
            $("#btn-stop").fadeOut(1000);
            $(btn).hide(1000);
            $("#btn-start").show();
            // $("#btn-lab-link").fadeOut(1000);
            $("#level-inProgress").fadeOut(1000);
            $("#level-stopped").hide();
            $("#btn-continue").hide();
            $(btn).buttonLoader('stop-q');
            document.getElementById("ip").style.display = "none" ;
            document.getElementById("labRemainingTime").style.display = "none";
            document.getElementById("completed").style.display = "none";
            Swal.fire({
                position: 'top-start',
                icon: 'success',
                title: 'Congrats, Keep Hacking Mate !',
                showConfirmButton: false,
                timer: 3500
              });
        }, 3000);
        clearInterval(lab_timer);
}


function start_lab_timer(amount){
    var now = new Date (),
    countDownDate = new Date ( now );
    countDownDate.setMinutes ( now.getMinutes() + amount );

    // Update the count down every 1 minute
    lab_timer = setInterval(function() {
    
        var now = new Date ();
        // Find the distance between now and the count down date
        distance = countDownDate - now;
        console.log(distance);
        // If the count down is over, write some text 
        if (distance == 999 || distance == 0) {
            const data = {
                status : 'expired',
                }
            clearInterval(lab_timer);
            document.getElementById("labRemainingTime").innerHTML = "EXPIRED";
            setTimeout(end_lab,5000);
        }
        
        
        // Time calculations for days, hours, minutes and seconds
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        // Output the result in an element with id="demo"
        document.getElementById("labRemainingTime").innerHTML = "Time Left : " + hours + "h" +minutes + "min";
    
    }, 1000);

}

function start_attack_box_timer(){
    // Set the date we're counting down to
    var now = new Date (),
    countDownDate = new Date ( now );
    countDownDate.setMinutes ( now.getMinutes() + 91 );

    // Update the count down every 1 minute
    attack_box_timer = setInterval(function() {
    
        var now = new Date ();
        // Find the distance between now and the count down date
        distance = countDownDate - now;
        console.log("attack "+distance);
        // If the count down is over, write some text 
        if (distance < 0) {
            const data = {
                status : 'expired',
                }
            clearInterval(attack_box_timer);
            document.getElementById("remainingTime").innerHTML = "EXPIRED";
            axios.post('/attack-box/timer/',data,{headers: {'X-CSRFToken': csrftoken}})
            .then(res=> console.log(res))
            .then(err => console.error(err));
        }
        
        
        // Time calculations for days, hours, minutes and seconds
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        // Output the result in an element with id="demo"
        document.getElementById("remainingTime").innerHTML = "Time Left : " + hours + "h" +minutes + "min";
    
    }, 1000);


}

// function time_checker(){

//     time_checker = setInterval(()=>{
//         axios.post('check_time/',{},{headers: {'X-CSRFToken': csrftoken}})
//         .then(res=> {
//             if (res.data.remaining_time) {
//                 console.log(res.data.remaining_time);
//             }
//             else {
//                 console.log("Not Active");
//             }
//         }
//             )
//         .then(err => console.error(err));
        
//     }, 2000);
        
// }