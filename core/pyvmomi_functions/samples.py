from pyVmomi import vim
from pyVim.task import WaitForTask
from ..tools.tasks import wait_for_tasks
from ..tools import service_instance

def vm_power_on(serv_inst,vmnames):
  """
  Python function for powering on VMs
  """

  si = serv_inst
  if not vmnames:
    print("No virtual machine specified for power-on")
    return False
  
  content = si.content
  obj_view = content.viewManager.CreateContainerView(content.rootFolder,[vim.VirtualMachine],True)
  vm_list = obj_view.view

  obj_view.Destroy()
  
  # find the vm and power it on 
  tasks = [vm.PowerOn() for vm in vm_list if vm.name in vmnames]

  wait_for_tasks(si, tasks)
  print("Virtual Machine(s) have been powered on successfully")
  return True

  

def vm_power_off(serv_inst,vmnames):
  """
  Python function for powering off VMs
  """
  si = serv_inst
  if not vmnames:
    print("No virtual machine specified for power-off")
    return False
  content = si.content
  obj_view = content.viewManager.CreateContainerView(content.rootFolder,[vim.VirtualMachine],True)
  vm_list = obj_view.view
  
  obj_view.Destroy()
  
  # find the vm and power it off
  tasks = [vm.PowerOff() for vm in vm_list if vm.name in vmnames]

  wait_for_tasks(si, tasks)

  print("Virtual Machine(s) have been powered off successfully")
  return True



def find_vm_uuid(serv_inst,uuid):

  """
  python function to find a vm by its uuid
  """
  si = serv_inst

  searchIndex = si.content.searchIndex

  vm = searchIndex.FindByUuid(None,uuid,True)

  if not vm :
    print("Could not find virtual machine")

  return vm  



def find_vm_dns_name(serv_inst,dns_name):

  """
  python function to find a vm by its dns_name
  """ 
  si = serv_inst

  searchIndex = si.content.searchIndex

  vm = searchIndex.FindByDnsName(None,dns_name,True)

  if not vm :
    print("Could not find virtual machine")

  return vm  



def find_vm_ip(serv_inst,ip):
  """
  python function to find a vm by its ip address
  """ 
  si = serv_inst

  searchIndex = si.content.searchIndex
  
  vm = searchIndex.FindByIp(None,ip,True)

  if not vm :
    print("Could not find virtual machine")
  
  return vm



def find_vm_name(serv_inst,name):
  """
  Python function to find a vm by its name
  """

  si = serv_inst
  content = si.content
  obj_view = content.viewManager.CreateContainerView(content.rootFolder,[vim.VirtualMachine],True)
  vm_list = obj_view.view
  obj_view.Destroy()

  VM = None
  for vm in vm_list :
    if vm.name == name :
      VM = vm
  
  if not VM :
    print ("Could not find virtual machine")
  return VM   



def vm_reboot(serv_inst,name):
  """
  Python function to reboot a vm 
  """
  # first we need to find that vm 
  si = serv_inst
  VM = find_vm_name(si,name)
  if not VM :
    print ("We can't reboot a non-existed machine !")
    return False
  try :
    tasks = VM.ResetVM_Task()
    wait_for_tasks(si,tasks)
    return True
  except :
    return False



def vm_soft_reboot(serv_inst,name):
  """
  Python function to reboot softly a vm (vmware tools must be installed)
  """
  si = serv_inst
  VM = find_vm_name(si,name)
  if not VM :
    print ("We can't reboot a non-existed machine !")
    return False
  
  # This doesn't garantee a reboot .
  # It issues a command to the guest
  # operating system asking it to perform a reboot.
  # Returns imediately and does not wait for the guest
  # operating system to complete the operation
  VM.RebootGuest()
  print("A request to reboot the virtual machine has been sent to the guest operatinf system")
  
  return True

def create_snapshot(serv_inst,vm_name,snap_name,snap_desc:str):
  vm = find_vm_name(serv_inst, vm_name)
  done = False
  if vm is None :
    raise Exception("Unable to locate VirtualMachine.")
  WaitForTask(vm.CreateSnapshot_Task(name=snap_name,description=snap_desc,memory=True,quiesce=False))
  done = True
  print("Snapshot Completed.")
  return done

def revert_to_snapshot(serv_inst,vm_name,snap_name):
  vm = find_vm_name(serv_inst, vm_name)
  done = False
  if vm is None :
    raise Exception("Unable to locate VirtualMachine.")
  snapshots = vm.snapshot.rootSnapshotList
  snap_obj = get_snapshots_by_name_recursively(snapshots, snap_name)
  
  if len(snap_obj) == 1 : # we wont get an error because we've declared snap_obj as a list, so if we haven't a 
    #snapshot with that name then len(snap_obj)==0 and no error will occur.
    snap_obj = snap_obj[0].snapshot
    WaitForTask(snap_obj.RevertToSnapshot_Task())
    done = True

  return done

def get_snapshots_by_name_recursively(snapshots,snap_name):
  # the snapshots parameter is : vm.snapshot.rootSnapshotList
  # Because the snapshots are not listed directly, and the second snapshot is a child of the first snapshot, we        need to use recursion to search for a snapshot or to list the available snapshots. 
  snap_obj=[]
  for snapshot in snapshots :
    # this for loop is equivalent to accessing snapshots by index; ie : snapshot == snapshots[0]
    if snapshot.name == snap_name :
      snap_obj.append(snapshot)
    else :
      snap_obj = snap_obj + get_snapshots_by_name_recursively(snapshot.childSnapshotList, snap_name)
  return snap_obj

