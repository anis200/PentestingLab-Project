from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
from django.db.models.signals import post_save

from countdowntimer_model.models import CountdownTimer


class Lab(models.Model):
    # labId = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=60)
    category = models.CharField(max_length=60)
    type = models.CharField(max_length=60)
    description = models.TextField(blank=True)
    mission = models.TextField(blank=True)
    created_at = models.DateField(auto_now_add=True)
    level = models.CharField(max_length=30)
    users = models.ManyToManyField(User, through="UserLab")
    vm = models.ForeignKey("VirtualMachine", on_delete=models.CASCADE)
    docker_image = models.CharField(max_length=30)
    docker_container_port = models.CharField(max_length=5)

    def __str__(self) -> str:
        return self.name


# userLabs are created if the user runs a specific lab !!!
# When a user quits the lab the active attribute of the lab must be turned to False.
class UserLab(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    lab = models.ForeignKey("Lab", on_delete=models.CASCADE)
    container = models.OneToOneField("Container", null=True, on_delete=models.SET_NULL)
    started_at = models.TimeField(auto_now_add=True)
    labLink = models.URLField(null=True, blank=True)
    completed = models.BooleanField(default=False)
    active = models.BooleanField(default=True)

    def __str__(self) -> str:
        # lab = Lab.objects.get(name=self.labId)
        return f"{self.user}, {self.lab}"

    class Meta:
        unique_together = ("user", "lab")


class Flag(models.Model):
    flag = models.CharField(max_length=80, primary_key=True)
    lab = models.ForeignKey("Lab", on_delete=models.CASCADE)

    def __str__(self) -> str:
        return f"{self.lab} flag"


class AttackBox(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    name = models.CharField(max_length=30)
    poweredOn = models.BooleanField(default=False)
    machineLink = models.URLField(
        null=True, blank=True
    )  # the same field with userLab table "Must resolve the conflit asap"

    def __str__(self) -> str:
        return f"{self.name}, {self.user}, {self.poweredOn}"

    class Meta:
        unique_together = ("name", "user")


class VirtualMachine(models.Model):
    uuid = models.CharField(max_length=50, primary_key=True)
    name = models.CharField(max_length=30)
    ipAddress = models.CharField(max_length=30)
    state = models.CharField(max_length=15)

    def __str__(self) -> str:
        return self.name


class Container(models.Model):
    short_id = models.CharField(max_length=11, primary_key=True)
    name = models.CharField(max_length=30)
    host_port = models.CharField(max_length=5)

    def __str__(self) -> str:
        return self.name


class AttackBoxCountdownTimer(CountdownTimer):
    duration_in_minutes = models.PositiveSmallIntegerField()
    state = models.PositiveSmallIntegerField()
    attack_box = models.OneToOneField(AttackBox, on_delete=models.CASCADE)


# Create a function that create new AttackBox instance -when a new user is registred- using signals :
# In this case the create_attackbox function is th rceiver of the signal
def create_attackbox(sender, **kwargs):
    if kwargs["created"]:
        att_box = AttackBox.objects.create(
            user=kwargs["instance"],
            name="Kali-Attack-Box",
            machineLink="http://localhost:8080/guacamole/#/client/NQBjAG15c3Fs",
        )


# send a signal !
post_save.connect(create_attackbox, sender=User)
# Create your models here.
