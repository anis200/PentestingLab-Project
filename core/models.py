import uuid
from django.db import models
from django.contrib.auth.models import User
from django.conf import settings

class Lab(models.Model):
    # labId = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=60)
    category = models.CharField(max_length=60)
    type = models.CharField(max_length=60)
    description = models.TextField(blank=True)
    mission = models.TextField(blank=True)
    created_at = models.DateField(auto_now_add=True)
    level = models.CharField(max_length=30)
    users = models.ManyToManyField(User, through='UserLab')
    vm = models.ForeignKey('VirtualMachine',on_delete=models.CASCADE)

    def __str__(self) -> str:
        return self.name

# userLabs are created if the user runs a specific lab !!!
# When a user quits the lab the active attribute of the lab must be turned to False.
class UserLab(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    lab = models.ForeignKey('Lab',on_delete=models.CASCADE)
    started_at = models.TimeField(auto_now_add=True)
    machineLink = models.URLField(null=True, blank=True)
    machineIp = models.CharField(max_length=40,null=True)
    completed = models.BooleanField(default=False)
    active = models.BooleanField(default=True)

    def __str__(self) -> str:
        # lab = Lab.objects.get(name=self.labId)
        return f'{self.user}, {self.lab}'
    class Meta:
        unique_together = ("user", "lab")

class Flag(models.Model):
    flag = models.CharField(max_length=80,primary_key=True) 
    lab = models.ForeignKey('Lab', on_delete=models.CASCADE)

    def __str__(self) -> str:
        return f'{self.lab} flag'

class AttackBox(models.Model):
    uuid = models.CharField(max_length=120,primary_key=True)
    name = models.CharField(max_length=30)
    poweredOn = models.BooleanField(default=False)
    machineLink = models.URLField(null=True, blank=True) # the same field with userLab table "Must resolve the conflit asap"

    def __str__(self)-> str :
        return f'{self.name}, {self.poweredOn}'

class VirtualMachine(models.Model):
    uuid = models.CharField(max_length=50,primary_key=True)
    name = models.CharField(max_length=30)
    ipAddress = models.CharField(max_length=30)
    state = models.CharField(max_length=15)

    def __str__(self) -> str:
        return self.name

# Create your models here.
